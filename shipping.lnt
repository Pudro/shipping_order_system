module shipping (types, channels, processes) is

  process main[p: product_C,
               q: quantity_C,
               p_in: product_in_C,
               q_in: quantity_in_C,
               sa: stock_available_C,
               oa: order_accepted_C,
               pr: payment_received_C,
               op: order_packed_C,
               o: order_C,
               co: cancel_order_C,
               clo: close_order_C,
               os: order_shipped_C,
               fo: order_finalized_C,
               notify_customer: any,
               cancel_order: any,
               close_order: any,
               packing_order: any,
               tracking_shipment: any,
               display_stock: any] is

    var available_stock: stock_array, x: nat, y: product in
      available_stock := stock_array(stock(STEEL_BEAM, quantity(10)));
      available_stock[1] := available_stock[1].{prod -> BLACHODACHOWKA, qty -> quantity(250)};
      available_stock[2] := available_stock[2].{prod -> PLANDEKA, qty -> quantity(50)};
      available_stock[3] := available_stock[3].{prod -> KOTWA, qty -> quantity(254)};
      display_stock(available_stock[0].prod, available_stock[0].qty,
                    available_stock[1].prod, available_stock[1].qty,
                    available_stock[2].prod, available_stock[2].qty,
                    available_stock[3].prod, available_stock[3].qty);

      par
        o -> receiveOrder[p_in, q_in, o]
        ||
        o, sa -> checkStock[o, sa, display_stock](available_stock)
        ||
        sa, co -> notifyOutOfStock[sa, co, notify_customer]
        ||
        sa, oa -> acceptOrder[sa, oa]
        ||
        o, oa -> updateStock[o, oa, display_stock](available_stock)
        ||
        co, clo, pr -> cancelOrder[co, clo, pr, cancel_order]
        ||
        clo, oa, fo -> closeOrder[clo, oa, os, fo, close_order]
        ||
        oa, pr -> makePayment[oa, pr]
        ||
        pr, fo -> finalizeOrder[pr, fo, os, packing_order, tracking_shipment](available_stock)
      end par
      
    end var
  end process

end module
